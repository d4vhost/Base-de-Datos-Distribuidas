BASES DE DATOS ARQUITECTURA CENTRALIZADO Y DISTRIBUIDA MODELO 

     Componentes principales: 
    Servidor Central: Un unico servidor que almacena toda la base de datos 
    Clientes: Acceden al servidor central para consultar o modificar los datos 

    Caracteristicas: 
    Centralizacion: Todos los datos se encuentran en un unico lugar (el servidor central) 
    Acceso: Los clientes se comunican directamente con el servidor para realizar operacione 

Si trabajan con una base de datos centralizada, deben presentar lo siguiente: 
    Diagrama de la Base de Datos üìä 
    Estructura de las tablas, relaciones (MER o relacional). 
    Descripci√≥n de la Arquitectura üèõÔ∏è 
    Explicaci√≥n de c√≥mo se accede a la base central desde los clientes. 
    Modelo de Datos üìë 
    Modelo relacional (tablas, claves primarias y for√°neas). 
    Ejemplo de Consultas SQL üíª 
    SELECT, INSERT, UPDATE, DELETE. 
    Esquema de Conexi√≥n üîó 
    Explicaci√≥n de c√≥mo las aplicaciones acceden a la base (API, cliente-servidor). 
    Seguridad y Respaldo üîê 
    M√©todos de autenticaci√≥n, copias de seguridad. 

MODELO DE BASE DE DATOS PARA ARQUITECTURA DISTRIBUIDA 
Nodos Distribuidos: Varios nodos que contienen partes de la base de datos 
Red de Comunicacion: Permite la comunicacion entre los nodos distribuidos 

CARACTERISTICAS  
Distroibucion: Los datos se almacenan en multples nodos distribuidos geograficamente 
Acceso: Los cliente pueden acceder a los datos desde los diferentes nodos 
VENTAJAS: 
Tolerancia a fallos: Menos propensos a fallas catastroficas porque no hay un solo punto de fallo 
Escalamiento: Puede escalar facilmente agregando mas nodos segun sea necesario 

Clasificaci√≥n de bases de datos distribuidas 
    Fragmentaci√≥n horizontal es mejor si las consultas suelen acceder a subconjuntos espec√≠ficos de registros (por ejemplo, por regi√≥n o categor√≠a). 
    Fragmentaci√≥n vertical es mejor si las consultas requieren solo ciertas columnas con frecuencia, reduciendo el tama√±o de cada fila. 

    Bases de datos distribuidas replicadas: Copian y sincronizan los mismos datos en varios nodos, mejorando disponibilidad y tolerancia a fallos.
    Bases de datos distribuidas h√≠bridas: Combinan fragmentaci√≥n y replicaci√≥n, equilibrando rendimiento, redundancia y optimizaci√≥n de consultas. 
Un schema (esquema) es la estructura l√≥gica de una base de datos que define sus tablas, columnas, relaciones, restricciones y otros elementos. 
    Bases de datos distribuidas homog√©neas: Todos los nodos usan el mismo software y estructura de datos, facilitando la integraci√≥n y administraci√≥n. 
    Bases de datos distribuidas heterog√©neas: Usan diferentes software y estructuras, permitiendo combinar diversas tecnolog√≠as pero con mayor complejidad. 

¬øCu√°l es mejor? 
Homog√©nea: Mejor para sistemas centralizados y f√°ciles de administrar. 
Heterog√©nea: √ötil cuando se necesitan integrar m√∫ltiples sistemas independientes con tecnolog√≠as distintas. 
    Base de datos federada: Conjunto de bases de datos independientes que se comunican mediante una capa de integraci√≥n sin necesidad de un esquema global. 
    Multidatabase: Conjunto de bases de datos aut√≥nomas con diferentes esquemas y tecnolog√≠as, integradas para consultas conjuntas pero sin una gesti√≥n centralizada. 
¬øCu√°l es mejor? 
    Federada: Mejor cuando se necesita cooperaci√≥n entre bases manteniendo su independencia. 
    Multidatabase: √ötil para acceder a m√∫ltiples bases heterog√©neas sin necesidad de integraci√≥n total. 

Los principales desaf√≠os en bases de datos distribuidas son: 
    Consistencia: Mantener los datos sincronizados entre nodos. 
    Disponibilidad: Garantizar acceso continuo a la informaci√≥n. 
    Rendimiento: Optimizar tiempos de respuesta y carga. 
    Seguridad: Proteger datos en m√∫ltiples ubicaciones. 
    Gesti√≥n de fallos: Recuperar informaci√≥n tras errores o desconexiones. 
    Complejidad: Administrar fragmentaci√≥n, replicaci√≥n y transacciones distribuidas. 

La fragmentaci√≥n horizontal es una t√©cnica en la que una tabla se divide en subconjuntos de filas seg√∫n un criterio l√≥gico, como el valor de una columna. Esto optimiza la eficiencia y distribuci√≥n de los datos en m√∫ltiples servidores. 

‚û°Ô∏è Beneficios de la fragmentaci√≥n horizontal: 
‚úÖ Mejora el rendimiento al reducir el volumen de datos en cada fragmento. 
‚úÖ Permite distribuir datos en distintos servidores, optimizando consultas. 
‚úÖ Aumenta la disponibilidad y facilita el mantenimiento. 

Una instancia de base de datos, seg√∫n lo entiendo, es como el entorno en el que se ejecuta una base de datos. Es decir, cuando instalo un sistema de gesti√≥n de base de datos (como MySQL, Oracle o SQL Server), se crea una instancia que incluye los procesos, la memoria y las configuraciones necesarias para que esa base funcione. 
En pocas palabras, yo lo veo as√≠: la instancia es el "motor" que hace que la base de datos pueda ser utilizada, mientras que la base de datos en s√≠ es como el "contenido" (tablas, datos, esquemas). Puedo tener varias bases de datos dentro de una misma instancia, pero sin la instancia, esas bases no funcionar√≠an. 
Puerto abierto en SQL es 1433 

La fragmentaci√≥n vertical divide una tabla en columnas, √∫til cuando algunas se consultan m√°s que otras. 
La fragmentaci√≥n horizontal divide una tabla en filas, ideal cuando los datos pueden separarse por regiones o categor√≠as. 

Replicaci√≥n y Diseminaci√≥n de Datos 
    Replicaci√≥n: Copiar datos en varios servidores para mejorar disponibilidad y rendimiento. 
    Diseminaci√≥n: Distribuir datos en diferentes ubicaciones seg√∫n la necesidad, sin mantener sincronizaci√≥n total. 

Update Anywhere 
Permite modificar datos en cualquier nodo de la red, y los cambios se sincronizan autom√°ticamente en todas las r√©plicas. 

API significa Application Programming Interface (Interfaz de Programaci√≥n de Aplicaciones).
Es un conjunto de reglas que permiten que dos aplicaciones se comuniquen entre s√≠. Por ejemplo:
    Una app m√≥vil de clima usa una API para pedir datos del tiempo a un servidor.

En resumen:
    Una API es una interfaz para acceder a funcionalidades o datos de otro sistema.
    No importa si se usa REST, SOAP, GraphQL, etc. ‚Äì sigue siendo una API.

¬øQu√© es REST?

REST significa REpresentational State Transfer.

Es un estilo de arquitectura para construir APIs. O sea, es una forma espec√≠fica de crear APIs.

Una API REST:
    Usa los m√©todos HTTP: GET, POST, PUT, DELETE, etc.
    Trabaja con recursos (ej: /usuarios, /productos).
    Usa URLs limpias y predecibles.
    Devuelve datos normalmente en formato JSON.
 

 

 

 
 

 

 
 

 

 
